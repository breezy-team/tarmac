======================
Writing Tarmac Plugins
======================

Introduction
============

  Tarmac has an event driven plugin system.  This plugin system allows a user
to drop code into ``$HOME/.config/tarmac/plugins`` and have it detected by
Tarmac, and executed either before the merge commit, or after it.


Writing the Hook
================

  A plugin is merely a python class inheriting from
``tarmac.plugins.TarmacPlugin``.  It has a pre-determined API, but is very
trivial to connect.  For example, a basic HelloWorldPlugin would start like
this::

  from tarmac.plugins import TarmacPlugin

  class HelloWorldPlugin(TarmacPlugin):
      '''A basic plugin that prints "Hello World" when fired.'''


  When the hook is imported from the plugins directories (either
``tarmac.plugins`` or ``$HOME/.config/tarmac/plugins``), the plugin should
register itself with either the pre-commit or post-commit HookPoint, regardless
of where the code for the plugin itself is.  For example, with the
HelloWorldPlugin above, the plugin would be registered with the following
code::

  from tarmac.hooks import tarmac_hooks

  tarmac_hooks['post_tarmac_commit'].hook(HelloWorldPlugin(),
      'Hello World Plugin')


  Now that the hook is registered, it needs to have some actually functionality
to it.  Because TarmacPlugins are merely callables, the ``__call__`` method
should be implemented.  For HelloWorldPlugin, it would look like this::

  class HelloWorldPlugin(TarmacPlugin):
      '''A basic plugin that prints "Hello World" when fired.'''

      def __call__(self, options, configuration, candidate, trunk):
          print 'Hello World!'

  Because this plugin was registered as a post-commit plugin, after each time a
merge is committed, Tarmac will print "Hello World!" to the terminal.  This is
a trivial example, but one that demonstrates how it works.  The arguments to
the plugin are explained below.

options
  The command line option specified.

configuration
  An instance of ``tarmac.config.TarmacConfig``.

candidate
  A Launchpad REST representation of the branch merge proposal being processed.

trunk
  An instance of ``tarmac.branch.Branch`` containing details about the target
  branch.


Ideas for future plugins
========================

  There have been many ideas for plugins.  Among them are the following...

PPA Plugin
  On each commit, trigger a build of a source package and send it off to a PPA.

Buildbot Plugin
  Trigger a run of a buildbot slave on each commit.


Caveats
=======

  Since Tarmac is still a young project, the API for plugins is subject to
drastic change in the next few versions of Tarmac, but is planned to be stable
when Tarmac reaches 1.0.
