======================
Writing Tarmac Plugins
======================

What's the point in having a plugin system if you can't actually write plugins
easily?  Tarmac's plugins make it easy for you to bend Tarmac's functionality
to your will.  This document describes the process of writing the plugins.

Writing a Plugin
================

A plugin is merely a python class inheriting from
``tarmac.plugins.TarmacPlugin``.  It has a pre-determined API, but is very
trivial to connect.  For example, a basic HelloWorldPlugin would start like
this::

  from tarmac.plugins import TarmacPlugin

  class HelloWorldPlugin(TarmacPlugin):
      '''A basic plugin that prints "Hello World" when fired.'''


This is an entirely plausible/valid plugin.  It's worthless, it's true, but
it's still valid.  The plugin does need to be registered with before it can be
used.  For instance, in order to register the plugin to be fired before commit,
you would use the following code:

  from tarmac.hooks import tarmac_hooks
  tarmac_hooks['tarmac_pre_commit'].hook(
      HelloWorldPlugin(), 'HelloWorld plugin')


You can put this into helloworld.py and pop it into
`$HOME/.config/tarmac/plugins/``.  The plugin is now available at
``tarmac.plugins.helloworld.HelloWorldPlugin`` and is registered to be fired
after the merge and before the commit.  You can use this plugin to make sure
the merge creates a kosher tree and reject it if it doesn't make you happy.

Now that we have our hook registered and available, we can make it actually do
something!  Let's have print "Hello World!"  TarmacPlugins are merely
callables, the ``__call__`` method should be implemented.  For
HelloWorldPlugin, it would look like this::

  class HelloWorldPlugin(TarmacPlugin):
      '''A basic plugin that prints "Hello World" when fired.'''

      def __call__(self, command, target, source, proposal):
          print 'Hello World!'

Now when we run the plugin, it will print "Hello World!" before each commit.
This is a trivial example, but one that demonstrates how it works.  The
arguments to the plugin are explained below.

command
  The tarmac command.  For instance, a ``tarmac land`` call.

target
  An instance of ``tarmac.branch.Branch`` containing details about the target
  branch.

source
  An instance of ``tarmac.branch.Branch`` containing details about the source
  branch.

proposal
  The merge proposal that proposes the source branch for merge into the target.

  An instance of ``tarmac.branch.Branch`` containing details about the target
  branch.


Caveats
=======

  Since Tarmac is still a young project, the API for plugins is subject to
drastic change in the next few versions of Tarmac, but is planned to be stable
when Tarmac reaches 1.0.
